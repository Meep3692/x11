package com.github.moaxcp.x11protocol.generator

import com.squareup.javapoet.ArrayTypeName
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.TypeSpec

import static com.squareup.javapoet.MethodSpec.methodBuilder
import static com.squareup.javapoet.TypeName.*
import static com.squareup.javapoet.TypeSpec.interfaceBuilder
import static javax.lang.model.element.Modifier.*

class BaseClassGenerator {
    File outputSrc
    String basePackage

    void generate() {
        generateIntValue()
        generateX11Input()
        generateX11Output()
    }

    void generateIntValue() {
        TypeSpec intValue = interfaceBuilder('IntValue')
            .addModifiers(PUBLIC)
            .addMethod(methodBuilder('getValue')
                .addModifiers(ABSTRACT, PUBLIC)
                .returns(INT)
                .build())
            .addMethod(methodBuilder('enableFor')
                .addParameter(INT, 'value')
                .addModifiers(PUBLIC, DEFAULT)
                .returns(INT)
                .addStatement('return value | getValue()')
                .build())
            .addMethod(methodBuilder('disableFor')
                .addParameter(INT, 'value')
                .addModifiers(PUBLIC, DEFAULT)
                .returns(INT)
                .addStatement('return value & ~getValue()')
                .build())
            .build()
        JavaFile.builder(basePackage, intValue).build().writeTo(outputSrc)
    }

    void generateX11Input() {
        TypeSpec x11Input = interfaceBuilder('X11Input')
            .addModifiers(PUBLIC)
            .addMethod(methodBuilder('readByte')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(BYTE)
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readInt8')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(BYTE)
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readInt16')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(SHORT)
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readInt32')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(INT)
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readInt64')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(LONG)
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readCard8')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(BYTE)
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readCard16')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(SHORT)
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readCard32')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(INT)
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readCard64')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(LONG)
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readString8')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(String.class)
                .addParameter(INT, 'length')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readBytes')
                .addModifiers(PUBLIC, ABSTRACT)
                .returns(ArrayTypeName.of(BYTE))
                .addParameter(INT, 'length')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('readPad')
                .addModifiers(PUBLIC, DEFAULT)
                .addParameter(INT, 'length')
                .addException(IOException.class)
                .addStatement("readBytes(length)")
                .build())
            .addMethod(methodBuilder('readPadAlign')
                .addModifiers(PUBLIC, DEFAULT)
                .addParameter(INT, 'forLength')
                .addException(IOException.class)
                .addStatement("readPadAlign(4, forLength)")
                .build())
            .addMethod(methodBuilder('readPadAlign')
                .addModifiers(PUBLIC, DEFAULT)
                .addParameter(INT, 'pad')
                .addParameter(INT, 'forLength')
                .addException(IOException.class)
                .addStatement("readBytes((pad - forLength % pad) % pad)")
                .build())
            .build()
        JavaFile.builder(basePackage, x11Input).build().writeTo(outputSrc)
    }

    void generateX11Output() {
        TypeSpec x11Input = interfaceBuilder('X11Output')
            .addModifiers(PUBLIC)
            .addMethod(methodBuilder('writeByte')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(BYTE, 'b')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writeInt8')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(BYTE, 'int8')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writeInt16')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(SHORT, 'int16')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writeInt32')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(INT, 'int32')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writeInt64')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(LONG, 'int64')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writeCard8')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(BYTE, 'card8')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writeCard16')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(SHORT, 'card16')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writeCard32')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(INT, 'card32')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writeCard64')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(LONG, 'card64')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writeString8')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(String, 'string')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writeBytes')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(ArrayTypeName.of(BYTE), 'bytes')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writePad')
                .addModifiers(PUBLIC, ABSTRACT)
                .addParameter(INT, 'length')
                .addException(IOException.class)
                .build())
            .addMethod(methodBuilder('writePadAlign')
                .addModifiers(PUBLIC, DEFAULT)
                .addParameter(INT, 'forLength')
                .addException(IOException.class)
                .addStatement("writeBytes(new byte[(4 - forLength % 4) % 4])")
                .build())
            .addMethod(methodBuilder('writePadAlign')
                .addModifiers(PUBLIC, DEFAULT)
                .addParameter(INT, 'pad')
                .addParameter(INT, 'forLength')
                .addException(IOException.class)
                .addStatement("writeBytes(new byte[(pad - forLength % pad) % pad])")
                .build())
            .build()
        JavaFile.builder(basePackage, x11Input).build().writeTo(outputSrc)
    }
}
