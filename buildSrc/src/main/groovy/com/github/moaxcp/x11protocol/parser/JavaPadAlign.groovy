package com.github.moaxcp.x11protocol.parser

import com.squareup.javapoet.ArrayTypeName
import com.squareup.javapoet.CodeBlock
import com.squareup.javapoet.TypeName

class JavaPadAlign implements JavaUnit {
    JavaType javaType
    XUnit xUnit
    int align
    JavaListProperty list
    boolean readParam

    @Override
    XUnit getXUnit() { //todo why is this not generated by groovy
        return xUnit
    }

    @Override
    TypeName getTypeName() {
        return ArrayTypeName.of(byte.class)
    }

    @Override
    CodeBlock getDeclareAndReadCode() {
        return CodeBlock.builder().addStatement(readCode).build()
    }

    @Override
    CodeBlock getReadCode() {
        if(align == 4) {
            return CodeBlock.of("in.readPadAlign(${list.lengthExpression.getExpression(TypeName.INT)})")
        }
        return CodeBlock.of("in.readPadAlign($align, ${list.lengthExpression.getExpression(TypeName.INT)})")
    }

    @Override
    void addBuilderCode(CodeBlock.Builder code) {
        throw new IllegalStateException('JavaPadAlign cannot be used with builder')
    }

    @Override
    void addWriteCode(CodeBlock.Builder code) {
        if(align == 4) {
            code.addStatement("out.writePadAlign(${list.lengthExpression.getExpression(TypeName.INT)})")
            return
        }
        code.addStatement("out.writePadAlign($align, ${list.lengthExpression.getExpression(TypeName.INT)})")

    }

    @Override
    boolean isReadProtocol() {
        return !readParam
    }

    @Override
    CodeBlock getSizeExpression() {
        return CodeBlock.of('$L', 0)
    }

    @Override
    Optional<Integer> getFixedSize() {
        return null
    }
}
